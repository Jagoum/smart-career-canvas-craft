// Defines a potential structure if cover letter content were to be stored as JSONB
// For now, the main 'content' field will remain primarily 'string' for simplicity,
// but this interface shows a possible future direction or for complex metadata.
export interface CoverLetterContent {
  // Example fields if content were structured:
  // salutation?: string; // e.g., "Dear Mr. Smith,"
  // body_paragraphs?: string[]; // Each paragraph as a string
  // closing?: string; // e.g., "Sincerely,"
  // signature?: string; // User's name
  // metadata?: {
  //   tone?: 'formal' | 'enthusiastic' | 'creative';
  //   length_category?: 'short' | 'medium' | 'long';
  // };
  [key: string]: any; // Allows for flexible fields if used as JSONB
}

export interface CoverLetter {
  id: string; // UUID, primary key
  user_id: string; // UUID, foreign key to users.id or profiles.id
  resume_id?: string; // UUID, optional, if based on a specific resume
  job_description: string; // text, the job ad it's tailored for
  
  // If you intend to store plain text directly, 'string' is sufficient.
  // If you might store structured data (JSONB) in the future, or alongside plain text,
  // then `string | CoverLetterContent` is appropriate.
  // For this iteration, assuming cover letters are primarily text generated by AI:
  content: string; // The generated cover letter as a string.
  // If you want to allow for future structured content, use:
  // content: string | CoverLetterContent; 

  created_at: Date | string; // ISO 8601 string format when type is string
  updated_at: Date | string; // ISO 8601 string format when type is string
}
